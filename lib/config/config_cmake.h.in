/**
*** Copyright (c) 2007-2010 Aidin Abedi http://code.google.com/p/shinyprofiler/
*** Copyright (c) 2001 David Love <david@homeunix.org.uk>
***
*** Permission is hereby granted, free of charge, to any person obtaining a copy
*** of this software and associated documentation files (the "Software"), to deal
*** in the Software without restriction, including without limitation the rights
*** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*** copies of the Software, and to permit persons to whom the Software is
*** furnished to do so, subject to the following conditions:
*** 
*** The above copyright notice and this permission notice shall be included in
*** all copies or substantial portions of the Software.
*** 
*** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*** THE SOFTWARE.
***
*** \file config.h
*** \brief Provides defines for platform, compiler and header options from CMake
***
*** \author Aidin Abedi
*** \author David Love
*** \date June 2011
**/

#ifndef CONFIG_CMAKE_H
#define CONFIG_CMAKE_H

/**
*** Platform Checks
**/

/* Core platform type */
#define WINDOWS	0x01
#define POSIX 	0x02

#cmakedefine PLATFORM_TYPE @PLATFORM_TYPE@

/* Bit Range and Endian checks
**
** Look for the machine type on Apple platforms at compile (not configure). Apple platforms
** allow multiple architectures to exit simultaneously, so we can't check at configure
**
** See: http://www.cmake.org/pipermail/cmake/2009-June/030126.html
**/

#if defined(__APPLE__)
#  if defined(__i386__)
#    undef HAVE_64_BIT
#    undef HAVE_BIG_ENDIAN
#  elif defined(__ppc__)
#    undef HAVE_64_BIT
#    define HAVE_BIG_ENDIAN
#  elif defined(__x86_64__)
#    define HAVE_64_BIT
#    undef HAVE_BIG_ENDIAN
#  elif defined(__ppc64__)
#    define HAVE_64_BIT
#    define HAVE_BIG_ENDIAN
#  else
      // oops
#    error "Unknown architecture!"
#  endif
#else
#cmakedefine HAVE_64_BIT
#cmakedefine HAVE_BIG_ENDIAN
#endif

/**
*** Complier Checks
**/

/* Define the compiler specific prefix for function call protocol and library attributes */
#cmakedefine SHINY_INLINE @SHINY_INLINE@
#cmakedefine SHINY_UNUSED @SHINY_UNUSED@
#cmakedefine SHINY_EXPORT @SHINY_EXPORT@

/* Define the symbols used as the standard integer types */
#cmakedefine INT32_T 	@INT32_T@
#cmakedefine UINT32_T	@UINT32_T@
#cmakedefine INT64_T	@INT64_T@
#cmakedefine UINT64_T	@UINT64_T@

/**
*** Header Checks
**/

/* Look for assertions */
#cmakedefine HAVE_ASSERT_H 1

/* Look for the C99 declaration of the standard types */
#cmakedefine HAVE_STDINT_H 1

/* Look for the C99 integer types: needed for UUIDs amongst others */
#cmakedefine HAVE_INTTYPES_H 1

/* Look for the header files defining the constants for type lengths */
#cmakedefine HAVE_VALUES_H 1
#cmakedefine HAVE_FLOAT_H 1
#cmakedefine HAVE_LIMITS_H 1

/* Look for a separate malloc header */
#cmakedefine EXPLICIT_MALLOC_H 1

/**
*** Function Checks
**/

/* Work out where timeval lives */
#cmakedefine TIME_IN_SYS_RESOURCE 1
#cmakedefine TIME_IN_SYS_TIME 1

/* Work out where gettimeofday lives */
#cmakedefine GETTIMEOFDAY_IN_SYS_TIME
#cmakedefine GETTIMEOFDAY_IN_TIME

#endif /*CONFIG_CMAKE_H */
